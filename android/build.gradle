allprojects {
    repositories {
        google()
        mavenCentral()
    }
}
//allprojects {
//    repositories {
////        google(
////        mavenCentral()
//        maven { url 'https://maven.aliyun.com/repository/google'}
//
//        maven { url 'https://maven.aliyun.com/repository/jcenter' }
//
//        maven { url 'http://maven.aliyun.com/nexus/content/groups/public'}
//    }
//}

// 修复由于高版本导致namespace检测为空的问题，没遇到可不添加
subprojects {
    afterEvaluate { project ->
        if (project.plugins.hasPlugin('com.android.library') || project.plugins.hasPlugin('com.android.application')) {
            println "project: ${project.name} Namespace get: ${project.android.namespace}"
            def packageName = project.android.namespace ?: project.android.defaultConfig.applicationId ?: project.android.sourceSets.main.manifest.srcFile.text.find(/package="([^"]*)"/) ?: project.group
            project.android.namespace = packageName
            println "Namespace set to: ${packageName} for project: ${project.name}"
            def manifestFile = project.android.sourceSets.main.manifest.srcFile
            if (manifestFile.exists()) {
                def manifestText = manifestFile.text
                if (manifestText.contains('package=')) {
                    manifestText = manifestText.replaceAll(/package="[^"]*"/, "")
                    manifestFile.text = manifestText
                    println "Package attribute removed in AndroidManifest.xml for project: ${project.name}"
                } else {
                    println "No package attribute found in AndroidManifest.xml for project: ${project.name}"
                }
            } else {
                println "AndroidManifest.xml not found for project: ${project.name}"
            }
        }
    }
}
// 修复由于高版本导致namespace检测为空的问题，没遇到可不添加

// 强制指定Kotilin版本
subprojects {
    project.buildDir = "${rootProject.buildDir}/${project.name}"
    afterEvaluate {
        if (it.hasProperty('android')) {
            if (it.android.namespace == null) {
                def manifest = new XmlSlurper().parse(file(it.android.sourceSets.main.manifest.srcFile))
                def packageName = manifest.@package.text()
//                    println("Setting ${packageName} as android namespace")
                android.namespace = packageName
            }
            // 指定Kotilin版本
            def javaVersion = JavaVersion.VERSION_17
            android {
                compileOptions {
                    sourceCompatibility javaVersion
                    targetCompatibility javaVersion
                }
                tasks.withType(org.jetbrains.kotlin.gradle.tasks.KotlinCompile).configureEach {
                    kotlinOptions {
                        jvmTarget = javaVersion.toString()
                    }
                }
//                    println("Setting java version to ${javaVersion.toString()} which is $javaVersion")
            }
        }
    }
}
// 强制指定Kotilin版本


rootProject.buildDir = "../build"
subprojects {
    project.buildDir = "${rootProject.buildDir}/${project.name}"
}
subprojects {
    project.evaluationDependsOn(":app")
}

tasks.register("clean", Delete) {
    delete rootProject.buildDir
}
